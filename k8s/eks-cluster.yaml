AWSTemplateFormatVersion: 2010-09-09
Description: 'An EKS cluster'

Parameters:
  ClusterName:
    Type: String
  EKSVersion:
    Type: String
    Default: '1.10'
  CidrVPC:
    Type: String
  CidrAPublic:
    Type: String
  CidrAPrivate:
    Type: String
  CidrBPublic:
    Type: String
  CidrBPrivate:
    Type: String
  CidrCPublic:
    Type: String
  CidrCPrivate:
    Type: String

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref CidrVPC
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/VPC'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/InternetGateway'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PrivateRouteTable'
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/PublicRouteTable'
      VpcId: !Ref VPC
  PublicSubnetRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  ServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEKSServicePolicy'
        - 'arn:aws:iam::aws:policy/AmazonEKSClusterPolicy'
  PolicyNLB:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'elasticloadbalancing:*'
              - 'ec2:CreateSecurityGroup'
              - 'ec2:Describe*'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: !Sub '${AWS::StackName}-PolicyNLB'
      Roles:
        - !Ref ServiceRole

  SubnetPublicA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref CidrAPublic
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublicA'
      VpcId: !Ref VPC
  SubnetPrivateA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref CidrAPrivate
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivateA'
      VpcId: !Ref VPC
  RouteTableAssociationPrivateA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SubnetPrivateA
  RouteTableAssociationPublicA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicA

  SubnetPublicB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref CidrBPublic
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublicB'
      VpcId: !Ref VPC
  SubnetPrivateB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref CidrBPrivate
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivateB'
      VpcId: !Ref VPC
  RouteTableAssociationPrivateB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SubnetPrivateB
  RouteTableAssociationPublicB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicB

  SubnetPublicC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref CidrCPublic
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPublicC'
      VpcId: !Ref VPC
  SubnetPrivateC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: 'AWS::Region'
      CidrBlock: !Ref CidrCPrivate
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/SubnetPrivateC'
      VpcId: !Ref VPC
  RouteTableAssociationPrivateC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref SubnetPrivateC
  RouteTableAssociationPublicC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublicC
  ControlPlane:
    Type: 'AWS::EKS::Cluster'
    Properties:
      Name: !Ref ClusterName
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref SubnetPublicC
          - !Ref SubnetPublicA
          - !Ref SubnetPublicB
      RoleArn: !GetAtt ServiceRole.Arn
      Version: !Ref EKSVersion
  ControlPlaneSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Communication between the control plane and worker node groups
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}/ControlPlaneSecurityGroup'
      VpcId: !Ref VPC

Outputs:
  ARN:
    Export:
      Name: !Sub '${AWS::StackName}::ARN'
    Value: !GetAtt ControlPlane.Arn
  CertificateAuthorityData:
    Value: !GetAtt ControlPlane.CertificateAuthorityData
  ClusterStackName:
    Value: !Ref 'AWS::StackName'
  Endpoint:
    Export:
      Name: !Sub '${AWS::StackName}::Endpoint'
    Value: !GetAtt ControlPlane.Endpoint
  SecurityGroup:
    Export:
      Name: !Sub '${AWS::StackName}::SecurityGroup'
    Value: !Join
      - ','
      - - !Ref ControlPlaneSecurityGroup
  SubnetsPrivate:
    Export:
      Name: !Sub '${AWS::StackName}::SubnetsPrivate'
    Value: !Join
      - ','
      - - !Ref SubnetPrivateC
        - !Ref SubnetPrivateA
        - !Ref SubnetPrivateB
  SubnetsPublic:
    Export:
      Name: !Sub '${AWS::StackName}::SubnetsPublic'
    Value: !Join
      - ','
      - - !Ref SubnetPublicC
        - !Ref SubnetPublicA
        - !Ref SubnetPublicB
  VPC:
    Export:
      Name: !Sub '${AWS::StackName}::VPC'
    Value: !Ref VPC
